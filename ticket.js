const { channel } = require("diagnostics_channel")
const { EmbedBuilder, ChannelType, ButtonStyle, ButtonBuilder, Events, TextInputBuilder, TextInputStyle, ModalBuilder, SelectMenuBuilder } = require("discord.js")
const { Discord, Interaction, PermissionsBitField, ActionRowBuilder, ApplicationCommandOptionType } = require("discord.js")
const ms = require("ms")
       const Enmap = require("enmap")
const { db } = require("../schemas.js/send")


        const db1 = new Enmap({
            name: 'ahmed',
            dataDir: './node_modules/enmap'

        })
module.exports = {
    name: 'ticket',
    description: 'Setup your ticket embed in your server ๐',


    run: async (client, interaction) => {

const user = interaction.user.id;


        const embed = new EmbedBuilder()
            .setColor("Random")
            .setTitle(`ููุชุญ ุชูุช ุงูุงุณุชูุณุงุฑ ูู ุจุงูุถุบุท ุนูู ุงูุฒุฑ`)



            .setDescription(`** ูู ูุถูู ูู ุจุงูุถุบุท ุนูู ุงูุฒุฑ ููุชุญ ุชูุช ููุญุตูู ุนูู ุฑุฏ ููุดููุชู **`)
            .setTimestamp();


        const row = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId("follow")
                    .setLabel(`open ticket`)
                    .setStyle(ButtonStyle.Secondary)
            )
 db1.ensure("bergo",
    {
        Userid : [],
        Channelid : []
    }
 )

 db1.push ("bergo" , user , "Userid" )

        const mm = await interaction.reply({ embeds: [embed], components: [row] })





        const ggg = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId("close")
                    .setEmoji("๐")
                    .setLabel(`close`)
                    .setStyle(ButtonStyle.Secondary)
            )
        const menu = new ActionRowBuilder()
            .addComponents(
                new SelectMenuBuilder()
                    .setCustomId('select')
                    .setPlaceholder('Nothing selected')
                    .setMinValues(1)
                    .setMaxValues(1)
                    .addOptions(
                        {
                            label: `ููู ุงุญุตู ููุฏ ุจูุช ุงูุทูุจุงุช`,
                            description: "ุนุงูุฒ ููุฏ ุจูุช ุงูุทูุจุงุช ูุงุนู ุงุญุตูู ุงุฒุงู",
                            value: `**ุงุณูุน ุงูููุฏูู ุจุชุงุน ุจูุช ุงูุทูุจุงุช ุงูุฏูููุฉ \n 10:51 \n ูุงูุช ุนุชุนุฑู ุงุฒุงู ุชุญุตูู **`,


                        },
                        {
                            label: `ุฏููู ุงูุงุดุชุฑุงู`,
                            description: `ูุดููุฉ ุนุฏู ุงูุญุตูู ุนูู ุฑุชุจุฉ ููุชููุจ ุจุงูุฑุบู ูู ุงุฑุณุงู ุฏููู ุงูุงุดุชุฑุงู`,
                            value: ` **ูู ุจูุชุงุจุฉ ุงูุฑ **\n \`\ ุงุดุชุฑุงู \`\ ู \`\ ูุบุฉ \`\ \n **ูุงุณูุน ุงูููุฏูู ุฌูุฏุง** `
                        },
                        {
                            label: `ุจุนุซุช ุฏููู ุงุดุชุฑุงู ุตุญ ููู ุงุฎุฐ ุงูุฑุชุจุฉ`,
                            description: `ูุง ุนู ุจุนุช ุฏููู ุงูุงุดุชุฑุงู ุตุญ ููุฑูู ููุง ุงุฎุฐุช ุงูุฑุชุจุฉ`,
                            value: ` ** ุงูุงุฌุงุจุฉ ูู ููุดู ูุงุญุฏ ูู ุงูุงููุฑุฒ \n Ahmed Sn ุงู Bergo** `
                        },
                        {
                            label: `ุนุฌูุฉ ุงูุญุธ`,
                            description: `ููู ุงูุนุจ ุนุฌูุฉ ุงูุญุธ`,
                            value: `**ุงูุชุญ ุชูุช ูุงูุชุจ \n \`\ $s \`\ \n ููู ุซู ุชุงุจุน ูุน ุงูุจูุช **`

                        },
                        {
                            label: `ุดุงุฑุฉ ุงููุทูุฑ ุงูุฌุฏูุฏุฉ`,
                            description: `ููููุฉ ุงูุญุตูู ุนูู ุดุงุฑุฉ ุงููุทูุฑ ุงูุฌุฏูุฏุฉ `,
                            value: `**  ูู ุจุณูุงุน ูุฐุง ุงูููุฏูู ุฌูุฏุง https://youtu.be/Tt62TowCwmg **`,

                        },
                        {

                            label: `ุณูุฑูุฑ ูุจูุน ุญุณุงุจุงุช ูู ุดูุก`,
                            description: " ุนุงูุฒ ุณูุฑูุฑ ูุจูุน ุญุณุงุจุงุช ูู ุดูุก ุจุงููู ุนููู ุงุจูุณ ุงูุฏู",
                            value: ` ** ุชูุถู ุงุญูู ุณูุฑูุฑ ู \n https://discord.gg/bskUKwgazT ** `,


                        },

                        {
                            label: "ุดุฑุงุก ุญุณุงุจ",
                            description: `ูุดููุฉ ุดุฑูุช ุญุณุงุจ ูุงูุญุณุงุจ ูุด ุดุบุงู`,
                            value: ` ** ุงูุงุฌุงุจุฉ ูุญู ูุง ููุชูู ุงู ุณูุฑูุฑ ุงุฎุฑ ุบูุฑ ุงูุดูุจ**`,

                        },
                        {
                            label: `ุฑุชุจุฉ ุจูุน ุงู ููู ุงุตูุฑ ุจุงุฆุน ูู ุงูุณูุฑูุฑ`,
                            description: `ููู ุงุดุชุฑู ุฑุชุจุฉ ุจูุน ุงู ููู ุงุตูุฑ ุจุงุฆุน ูู ุงูุณูุฑูุฑ`,
                            value: `** ุงูุชุญ ุชูุช ูุงูุชุจ \n \`\ +buy \`\ \n ุจุนุฏ ุฐูู ุงุฎุชุงุฑ ุฑูู ุงูุฑุชุจุฉ ุงูุชู ุชุฑูุฏ ุดุฑุงุคูุง**`,

                        },
                        {
                            label: "ูููุงุช ุจูุช ุนุฌูุฉ ุงูุญุธ",
                            description: "ููููุฉ ุงูุญุตูู ุนูู ูููุงุช ุจูุช ุนุฌูุฉ ุงูุญุธ",
                            value: ` **ุงูุชุจ ูููุฉ \n \`\ ุนุฌูุฉ \`\ \n ูุญูู ุงููุจูุบ ุงููุทููุจ ** `,


                        },
                        {
                            label: `ูุด ุนุงุฑู ุงุญูู ุงููููุงุช`,
                            description: "ูุด ุนุงุฑู ุงุญูู ุงููููุงุช ุงููุฐููุฑุฉ ูู ุงูููุฏูู ูู ุงููููุน ",
                            value: ` **ุงูุญู ูู  : \n ูู ูุง ุนููู ูู ูุชุงุจุฉ ูุฐุง ุงูุงูุฑ \n \`\ ads \`\ ู \`\ media \`\ * `,


                        },
                        {
                            label: `ูุดููุฉ ูู ุจูุช ุนุฌูุฉ ุงูุญุธ`,
                            description: "ููุง ุจุดุบู ุงูุจูุช ูุง ุจูุฌุจูู ุงูุฑุงุจุท ุญู ุฑูุน ุงูุจูุช ุงูููุงูู 24 ุณุงุนุฉ",
                            value: ` **ุงูุญู ูู : \n ูู ุจูุชุงุจุฉ ุงูุฑ \`\ ุฑูุจู \`\ \n ููู ุซู ุทุจู ุงูููุงู** `,


                        },
                        {
                            label: `ุนุงูุฒ ุงุนูู ุงุนูุงู`,
                            description: "ุนุงูุฒ ุชุนูู ุงุนูุงู ูุณูุฑูุฑู ุงู ููุงุชู ุงู ุงู ุดูุก",
                            value: ` ** ูู ุจูุชุงุจุฉ ุงูุฑ \n \`\ ุงุนูุงู \`\ \n ููู ุซู ุงุฎุชุงุฑ ุงูุจุงูุฉ ุงูููุงุณุจุฉ ูู** `,


                        },
                        {
                            label: `ุจูุช ุจูุน ุญุณุงุจุงุช`,
                            description: "ุนุงูุฒ ุจูุช ุจูุน ุญุณุงุจุงุช ููู ุงุญุตูู ุงููู ููุงุฉ ุงูููุชููุจ",
                            value: ` ** ุงูุงุฌุงุจุฉ ูู : \n ูู ุจูุชุงุจุฉ ุงูุฑ \n \`\ ุณุนุฑ \`\ \n ููู ุซู ุญูู ุงููุจูุบ ุงููุทููุจ ููุญุตูู ุนููู** `,


                        },
                        {
                            label: `ููู ุงุญุตู ูููุงุช ุงูููุชููุจ`,
                            description: "ูุด ุนุงุฑู ุงุญุตู ูููุงุช ุงูููุชููุจ",
                            value: ` ** ูู ูุง ุนููู ูู ูุชุงุจุฉ ุงูุฑ \n \`\ ูููุงุช \`\ \n ููู ุซู ุงุณูุน ุงูููุฏูู ุฌูุฏุง ** `,


                        },
                        {
                            label: `ุงุฌูุช ูู ุงูููุชููุจ`,
                            description: " ุงูุง ุฌุงู ูู ุงูููุชููุจ ูุนุงูุฒ ุฑุชุจุฉ ุจูุน",
                            value: ` **ุงูุงุฌุงุจุฉ ูู : \n  ูู ูุง ุนููู ูู ุงุฑุณุงู ุฏููู ุงุดุชุฑุงูู ููููุงุฉ ูู ุงูุชูุช ูุงูุชุธุฑ** `,


                        },
                        {
                            label: `ุฑุชุจุฉ ุงูุจูุน ุงุชุดุงูุช ููู`,
                            description: " ููุด ุงุชุดุงูุช ุฑุชุจุฉ ุงูุจูุน ููู",
                            value: ` ** ุงูุงุฌุงุจุฉ ูู : \n ุงูุณุจุจ ุงูู ุงููุฏ ุนููุช ููุดู ุงููุฑู ูู ููุฐุง ุถุฏ ุงูููุงููู ** `,


                        },
                        {
                            label: `ุฑุงุจุท ุชุจุน ูููุงุช ุฎุฑุจุงู`,
                            description: " ููุด ูุงุฎู ุฑุงุจุท ุงููููุงุช ุฎุฑุจุงู",
                            value: ` ** ุงูุงุฌุงุจุฉ ูู : \n ุญุจ ุงูุฑูุงุจุท ุจุชุงุนุชูุง ูููุง ุฌุฏูุฏุฉ ูููุด ุญุงุฌุฉ ุฎุฑุจุงูุฉ ุชุงูุฏ ูู ุนูุฏู๐คฃ ู** `,


                        },
                        {
                            label: `ูุธุงู ุงูุจูุณุชุงุช ููู`,
                            description: "ุนุงูุฒ ุงุนุฑู ูู ููู ูุธุงู ุจูุณุชุงุช ูู ุงูุณูุฑูุฑ ููุง ูุงู",
                            value: ` ** ุงูุงุฌุงุจุฉ ูู \n ุงููุฏ ููู ูุธุงู ุจูุณุชุงุช ูู ูุง ุนููู ูู ูุชุงุจุฉ ุงูุฑ \`\ ุจูุณุช \`\ ** `,


                        },
                        {
                            label: `ุจุงุฑุชูุฑ`,
                            description: "ุนุงูุฒ ุงุจูู ุจุงุฑุชูุฑ ุงุนูู ุงูู",
                            value: ` ** ููู Ahmed Sn ุงู Bergo  ** `,


                        },
                        {
                            label: `ุนุงูุฒ ุงุจูู ุงุฏุงุฑุฉ`,
                            description: " ุนุงูุฒ ุงุจูู ุงุฏุงุฑุฉ ูุงุนู ",
                            value: ` ** ุงูุงุฌุงุจุฉ ูู : \n ุฑูุญ ูุงุฎุฑ ุงูุณูุฑูุฑ ููู ุฑูู ุงุณููุง ุชูุฏูู ุงูุงุฏุงุฑุฉ ููู ุฒุฑุงุฑ ุฏูุณ ุนููู ูุงููู ุงูููุฑู** `,


                        },


                    ),
            );






        const collector = mm.createMessageComponentCollector()
        collector.on("collect", async i => {
            if (i.customId === "follow") {

                await i.guild.channels.create({
                    name: `${i.user.username}`,
                    type: ChannelType.GuildText,
                    permissionOverwrites: [
                        {
                            id: i.guild.id,
                            deny: [PermissionsBitField.Flags.ViewChannel],
                        },
                        {
                            id: i.user.id,
                            allow: [PermissionsBitField.Flags.ViewChannel],
                        },
                    ],
                }).then(async channel => {



          
                    db1.ensure("bergo",
                    {
                        Userid : [],
                        Channelid : []
                    }
                 )
                
                 db1.push ("bergo" , user , "Userid")
                 db1.push("bergo" , channel , "Channelid")
                    channel.send({ embeds: [new EmbedBuilder().setDescription(`** ูู ูุถูู ูู ุจุงุฎุชูุงุฑ ุงููุดููุฉ ุงูุชู ุชูุงุฌูู **`)], content: `<@${interaction.user.id}>`, components: [menu] })
                    channel.send({ components: [ggg] })


                    const vab = interaction.guild.channels.cache.find(o => o.name === ` ${interaction.user.username}`)






                    await i.deferReply({ fetchReply: true, ephemeral: true })
                    return await i.editReply({ content: `**Done created <@${i.user.id}> <#${channel.id}> **` })
                })

            }

        })
        client.on(Events.InteractionCreate, async interaction => {



            if (!interaction.isSelectMenu()) return;


            if (interaction.customId === "select") {


                const selected = interaction.values.join(', ');
                await interaction.deferReply({ fetchReply: true })
                return await interaction.editReply({ content: ` <@${interaction.user.id}> ${selected}  ` });










            }





        })









        const channel = interaction.guild.channels.cache.find(r => r.name === `ุชุฐูุฑุฉ ${interaction.user.username}`)
        client.on(Events.InteractionCreate, async interaction => {
            if (!interaction.isButton()) return;
            if (interaction.customId === "close") {
                if (!interaction.member.permissions.has(PermissionsBitField.Flags.ManageChannels) && !interaction.member.roles.cache.some((c) => c.name === "staff")) return await interaction.reply({ embeds: [new EmbedBuilder().setDescription(`<@${interaction.user.id}> You dont have permission Or you didnt have a role named (staff) , Sorry`)] })

                await interaction.deferReply({ fetchReply: true, ephemeral: true })
                return await interaction.followUp({ embeds: [new EmbedBuilder().setDescription(`** <@${interaction.user.id}> Done Your ticket  will be deleted after 5 seconds**`)] }).then(channel => {


                    setTimeout(() => // Setup a timer
                        interaction.channel.delete(), 5000) // Deletes the users message
                    // Deletes the ticket message
                    interaction.member.send({ content: ` ** <@${interaction.user.id}> Done your ticket has been deleted ** ` })



                })

            }

        })

































    }
}
